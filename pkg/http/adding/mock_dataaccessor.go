// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/breiting/bookless/pkg/http/adding (interfaces: DataAccessor)

// Package adding is a generated GoMock package.
package adding

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataAccessor is a mock of DataAccessor interface
type MockDataAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockDataAccessorMockRecorder
}

// MockDataAccessorMockRecorder is the mock recorder for MockDataAccessor
type MockDataAccessorMockRecorder struct {
	mock *MockDataAccessor
}

// NewMockDataAccessor creates a new mock instance
func NewMockDataAccessor(ctrl *gomock.Controller) *MockDataAccessor {
	mock := &MockDataAccessor{ctrl: ctrl}
	mock.recorder = &MockDataAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataAccessor) EXPECT() *MockDataAccessorMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method
func (m *MockDataAccessor) CreateCustomer(arg0 context.Context, arg1 Customer) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer
func (mr *MockDataAccessorMockRecorder) CreateCustomer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockDataAccessor)(nil).CreateCustomer), arg0, arg1)
}
